{"version":3,"sources":["helpers/index.ts","components/Download.tsx","constants.ts","components/MyMenu.tsx","components/SearchForm.tsx","components/Tweet.tsx","components/Home.tsx","components/TweetView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["makeFetchURI","opts","id","accessToken","accessTokenSecret","prefix","qs","concat","extractMediaList","tweet","entities","media","map","id_str","url","media_url_https","simpleRe","statusRe","urlRe","getMediaExtension","uri","s","split","pop","replace","makeTweetJsonFileName","makeTweetJson","JSON","stringify","DownloadTweet","props","tweetID","react","Button","onClick","b","Blob","FileSaver","DownloadZip","handleClick","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","zip","mediaList","urls","blob","wrap","_context","prev","next","JSZip","file","x","Promise","all","fetch","sent","resp","idx","mediaBlob","ext","mediaFileName","binary","generateAsync","type","stop","apply","this","arguments","Download","Download_DownloadTweet","Download_DownloadZip","TWITTER_ACCESS_TOKEN_KEY","TWITTER_SECRET_KEY","MyMenu","_useState","useState","firebase","auth","currentUser","_useState2","slicedToArray","user","setUser","_useState3","_useState4","error","setError","handleSignIn","_handleSignIn","provider","result","credential","setPersistence","Auth","Persistence","LOCAL","TwitterAuthProvider","signInWithPopup","localStorage","setItem","secret","t0","handleSingOut","_handleSingOut","_callee2","_context2","removeItem","signOut","onAuthStateChanged","react_default","createElement","Menu","Item","href","Fragment","src","photoURL","displayName","Icon","name","SearchForm","initialId","history","input","setInput","trim","test","URL","host","endsWith","m","exec","pathname","err","sanitize","tweetURL","Form","onSubmit","evt","data","preventDefault","push","Field","undefined","placeholder","value","onChange","target","as","Link","to","Tweet","setTweet","onRequest","setOnRequest","_request","status","json","Error","message","React","useEffect","request","view","TweetRunning","_","isError","TweetFailure","TweetSuccess","renderTweet","tweet_embed_es","Download_Download","key","msg","toString","Home","SearchForm_SearchForm","TweetView","match","params","getItem","secretToken","Tweet_Tweet","App","Container","text","MyMenu_MyMenu","react_router","exact","path","component","Boolean","window","location","hostname","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11885862.chunk.js","sourcesContent":["import { ResponseData } from \"twitter\";\n\nexport const makeFetchURI = (opts: {\n  id: string,\n  accessToken: string,\n  accessTokenSecret: string,\n}) => {\n  const {\n    id,\n    accessToken,\n    accessTokenSecret,\n  } = opts;\n\n  // TODO URL?\n  const prefix = 'https://w4b8r4621c.execute-api.ap-northeast-2.amazonaws.com/dev';\n  // TODO\n  const qs = `id=${id}&access_token_key=${accessToken}&access_token_secret=${accessTokenSecret}`;\n  const local = `${prefix}/show?${qs}`;\n  const remote = `${prefix}/show?${qs}`;\n  if (process.env.NODE_ENV === 'development') {\n    return local;\n  } else {\n    return remote;\n  }\n};\n\nexport function extractMediaList(tweet: ResponseData) {\n  const toMedia = (media: any) => ({\n    id: media.id_str,\n    url: media.media_url_https,\n  });\n  const rawMedia: any[] = tweet.entities.media;\n  const mediaList = rawMedia.map(toMedia);\n  return mediaList;\n}\n\nconst simpleRe = /^\\d+$/;\nconst statusRe = /\\/.+\\/status\\/(\\d+)/;\nconst urlRe = /twitter\\.com\\/.+\\/status\\/(\\d+)/;\n\nexport function sanitize(input: string) {\n  const s = input.trim();\n\n  if (simpleRe.test(s)) { return s; }\n\n  try {\n    const url = new URL(s);\n    if (!url.host.endsWith('twitter.com')) {\n      return undefined;\n    }\n\n    const m = statusRe.exec(url.pathname);\n    if (m) { return m[1]; }\n    return undefined;\n\n  } catch (err) {\n    // http, https 안붙은 URL은 url 처리 실패\n  }\n\n  const m = urlRe.exec(s);\n  if (m) { return m[1]; }\n\n  return undefined;\n}\n","import * as React from 'react';\nimport { Button } from 'semantic-ui-react';\nimport JSZip from 'jszip';\nimport * as FileSaver from 'file-saver';\nimport { ResponseData } from 'twitter';\nimport { extractMediaList } from '../helpers';\n\nconst getMediaExtension = (uri: string): string => {\n  // sample\n  // https://pbs.twimg.com/media/DHkFxooUAAAzAry.jpg:orig\n  let s = uri.split('.').pop();\n  if (s) {\n    s = s.replace(':orig', '');\n  }\n  return s || '';\n};\n\nconst makeTweetJsonFileName = (id: string): string => {\n  return `${id}.json`;\n};\n\nconst makeTweetJson = (tweet: ResponseData): string => {\n  return JSON.stringify(tweet, null, 2);\n};\n\nconst DownloadTweet = (props: { tweet: ResponseData }) => {\n  const { tweet } = props;\n  const tweetID = tweet.id_str;\n\n  const handleClick = () => {\n    const b = new Blob([makeTweetJson(tweet)]);\n    FileSaver.saveAs(b, makeTweetJsonFileName(tweetID));\n  };\n  return <Button onClick={handleClick}>tweet json</Button>;\n};\n\n\nconst DownloadZip = (props: { tweet: ResponseData }) => {\n  const { tweet } = props;\n  const tweetID = tweet.id_str;\n\n  const handleClick = async () => {\n    const zip = new JSZip();\n    zip.file(makeTweetJsonFileName(tweetID), makeTweetJson(tweet));\n\n    const mediaList = extractMediaList(tweet);\n    const urls = mediaList.map(x => x.url);\n    const respList = await Promise.all(urls.map(url => fetch(url)));\n    respList.map((resp, idx) => {\n      const url = urls[idx];\n      const mediaBlob = resp.blob();\n      const ext = getMediaExtension(url);\n      const mediaFileName = `${tweetID}_${idx + 1}.${ext}`;\n      zip.file(mediaFileName, mediaBlob, { binary: true });\n    });\n\n    let blob = await zip.generateAsync({ type: 'blob' });\n    FileSaver.saveAs(blob, `${tweetID}.zip`);\n  };\n  return <Button onClick={handleClick}>zip (tweet json + media)</Button>;\n};\n\nconst UploadGoogleDrive = () => {\n  const handleClick = () => {\n  };\n  return <Button onClick={handleClick}>google drive</Button>;\n};\n\n\ninterface Props {\n  tweet: ResponseData;\n}\n\nexport const Download = (props: Props) => {\n  const { tweet } = props;\n  return (\n    <div>\n      <DownloadTweet tweet={tweet} />\n      <DownloadZip tweet={tweet} />\n    </div>\n  );\n};\n","export const TWITTER_ACCESS_TOKEN_KEY = 'twitter-access-token';\nexport const TWITTER_SECRET_KEY = 'twitter-secret';\n","import React, { useState } from 'react';\nimport { Menu, Icon } from 'semantic-ui-react';\nimport firebase from 'firebase';\nimport {\n  TWITTER_ACCESS_TOKEN_KEY,\n  TWITTER_SECRET_KEY,\n} from '../constants';\n\nexport const MyMenu: React.FC = () => {\n  const [user, setUser] = useState(firebase.auth().currentUser);\n  const [error, setError] = useState<Error | null>(null);\n\n  firebase.auth().onAuthStateChanged(user => {\n    setUser(user);\n  });\n\n  async function handleSignIn() {\n    try {\n      await firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\n\n      const provider = new firebase.auth.TwitterAuthProvider();\n      const result = await firebase.auth().signInWithPopup(provider);\n      setUser(result.user);\n\n      const credential = result.credential! as firebase.auth.OAuthCredential;\n      localStorage.setItem(TWITTER_ACCESS_TOKEN_KEY, credential.accessToken!);\n      localStorage.setItem(TWITTER_SECRET_KEY, credential.secret!);\n\n    } catch (err) {\n      setError(err);\n    }\n  };\n\n  async function handleSingOut() {\n    localStorage.removeItem(TWITTER_ACCESS_TOKEN_KEY);\n    localStorage.removeItem(TWITTER_SECRET_KEY);\n    await firebase.auth().signOut();\n  }\n\n  return (\n    <Menu>\n      <Menu.Item>\n        <a href=\"/serina\">serina</a>\n      </Menu.Item>\n\n      {(() => {\n        if (error) {\n          return (\n            <Menu.Item>\n              Error!\n            </Menu.Item>\n          );\n\n        } else if (user) {\n          return (\n            <>\n              <Menu.Item>\n                <img src={user.photoURL!} />\n                <span>{user.displayName}</span>\n              </Menu.Item>\n              <Menu.Item onClick={handleSingOut}>\n                <Icon name=\"sign out\" />\n                Sign Out\n              </Menu.Item>\n            </>\n          );\n\n        } else {\n          return (\n            <Menu.Item\n              name=\"sign in\"\n              onClick={handleSignIn}>\n              Sign In\n            </Menu.Item>\n          );\n        }\n      })()}\n    </Menu>\n  )\n}\n","import React, { useState } from 'react';\nimport { Button, Form, FormProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { sanitize } from '../helpers';\nimport { History } from 'history';\n\ninterface Props {\n  initialId: string;\n  history: History,\n}\n\nconst SampleTweetID = '898755978153181185';\n\nexport const SearchForm = (props: Props) => {\n  const {\n    initialId,\n    history,\n  } = props;\n\n  const [input, setInput] = useState<string>(initialId);\n\n  const id = sanitize(input);\n  const tweetURL = `/tweet/${id}`;\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(evt.target.value);\n\n  };\n  const handleSubmit = (evt: React.FormEvent<HTMLFormElement>, data: FormProps) => {\n    evt.preventDefault();\n    history.push(tweetURL);\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.Field error={id === undefined}>\n        <label>tweet id</label>\n        <input\n          type=\"text\"\n          name=\"query\"\n          placeholder={SampleTweetID}\n          value={input}\n          onChange={handleChange}\n        />\n      </Form.Field>\n      <Form.Field>\n        <Button as={Link} to={tweetURL}>fetch</Button>\n      </Form.Field>\n    </Form>\n  );\n};\n","import React, { useState } from 'react';\nimport _ from 'lodash';\nimport { ResponseData } from 'twitter';\nimport { default as TweetEmbed } from 'react-tweet-embed';\nimport { Download } from './Download';\nimport { makeFetchURI, extractMediaList } from '../helpers';\n\ninterface Props {\n  id: string;\n  accessToken: string;\n  accessTokenSecret: string;\n}\n\nexport const Tweet: React.FC<Props> = (props: Props) => {\n  const {\n    id,\n  } = props;\n\n  const [tweet, setTweet] = useState<ResponseData | Error | null>(null);\n  const [onRequest, setOnRequest] = useState(false);\n\n  React.useEffect(() => {\n    request();\n  }, [id]);\n\n  async function request() {\n    setOnRequest(true);\n    try {\n      const uri = makeFetchURI(props);\n      const resp = await fetch(uri);\n      if (resp.status >= 400) {\n        const err = await resp.json();\n        throw new Error(err.message);\n      }\n\n      const data = await resp.json();\n      setTweet(data);\n\n    } catch (err) {\n      setTweet(err);\n    }\n    setOnRequest(false);\n  }\n\n  const view = renderTweet(tweet, onRequest);\n  return (\n    <div>\n      {view}\n      <h3>preview</h3>\n      <TweetEmbed id={id} />\n    </div>\n  );\n}\n\nfunction renderTweet(tweet: ResponseData | Error | null, onRequest: boolean) {\n  if (onRequest) { return TweetRunning({}); }\n  if (_.isError(tweet)) { return TweetFailure({ error: tweet }); }\n  if (tweet) { return TweetSuccess({ tweet }); }\n  return TweetRunning({});\n}\n\nconst TweetSuccess: React.FC<{ tweet: ResponseData }> = (props: { tweet: ResponseData }) => {\n  const { tweet } = props;\n  const mediaList = extractMediaList(tweet);\n\n  return (\n    <div>\n      <h3>download</h3>\n      <Download tweet={tweet} />\n\n      <h3>media list</h3>\n      <ol>\n        {\n          mediaList.map((media: any) => {\n            return (\n              <li key={media.id}>\n                <a href={media.url} target=\"_blank\">{media.url}</a>\n              </li>\n            );\n          })\n        }\n      </ol>\n    </div >\n  );\n}\n\nconst TweetFailure: React.FC<{ error: Error }> = (props: { error: Error }) => {\n  const { error } = props;\n  const msg = error ? error.toString() : 'blank';\n  return (\n    <div>error : {msg}</div>\n  );\n}\n\nconst TweetRunning: React.FC = () => {\n  return (\n    <div>running</div>\n  );\n}\n","import React, { useState } from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport { SearchForm } from '.';\n\ninterface Props extends RouteComponentProps<{}> {\n}\n\nexport const Home: React.FC<Props> = (props: Props) => {\n  return (\n    <>\n      <SearchForm\n        initialId={''}\n        history={props.history}\n      />\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport { SearchForm } from '.';\nimport { Tweet } from './Tweet';\nimport {\n  TWITTER_SECRET_KEY,\n  TWITTER_ACCESS_TOKEN_KEY,\n} from '../constants';\n\ninterface Props extends RouteComponentProps<{ id: string }> {\n}\n\nexport const TweetView: React.FC<Props> = (props: Props) => {\n  const initialId = props.match.params.id;\n  const accessToken = localStorage.getItem(TWITTER_ACCESS_TOKEN_KEY);\n  const secretToken = localStorage.getItem(TWITTER_SECRET_KEY);\n\n  if (!accessToken) { return <div>access token not found</div>; }\n  if (!secretToken) { return <div>secret token not found</div>; }\n\n  return (\n    <>\n      <SearchForm\n        initialId={initialId}\n        history={props.history}\n      />\n      <Tweet\n        id={initialId}\n        accessToken={accessToken}\n        accessTokenSecret={secretToken}\n      />\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport {\n  MyMenu,\n  Home,\n  TweetView,\n} from './components';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\nimport { Route, RouteComponentProps } from 'react-router';\n\nconst App: React.FC = () => {\n\n  const prefix = '/serina';\n\n  return (\n    <Container text>\n      <MyMenu />\n\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path={`${prefix}/`} component={Home} />\n\n      <Route exact path=\"/tweet/:id/\" component={TweetView} />\n      <Route exact path={`${prefix}/tweet/:id/`} component={TweetView} />\n    </Container>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA6uzrv7S9DuRkgyswaAiE1NmGasCUkezQ\",\n  authDomain: \"serina-dfa02.firebaseapp.com\",\n  databaseURL: \"https://serina-dfa02.firebaseio.com\",\n  projectId: \"serina-dfa02\",\n  storageBucket: \"\",\n  messagingSenderId: \"705473550769\",\n  appId: \"1:705473550769:web:374d2e571c3115aa\"\n};\nfirebase.initializeApp(firebaseConfig);\n\nconst AppRouter: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  );\n}\n\nReactDOM.render(<AppRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}